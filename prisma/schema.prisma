generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id               String        @id @default(cuid())
  hostAwayId       String        @unique
  propertyName     String
  guestLeaderName  String
  guestLeaderEmail String
  guestLeaderPhone String?
  checkInDate      DateTime
  checkOutDate     DateTime
  numberOfGuests   Int
  roomNumber       String?
  checkInToken     String        @unique
  universalKeypadCode String?    // Universal 6-digit code for all Nuki doors
  status           BookingStatus @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  guests           Guest[]
  payments         Payment[]
  virtualKeys      VirtualKey[]
  ubyPortExport    UbyPortExport?

  @@map("bookings")
}

model Guest {
  id               String    @id @default(cuid())
  bookingId        String
  firstName        String
  lastName         String
  dateOfBirth      DateTime?
  nationality      String?
  citizenship      String?
  residenceCountry String?
  residenceCity    String?
  residenceAddress String?
  purposeOfStay    String?
  documentType     String?
  documentNumber   String?
  visaNumber       String?
  notes            String?
  email            String?
  phone            String?
  phoneCountryCode String?   @default("+420")
  createdAt        DateTime  @default(now())
  isLeadGuest      Boolean?  @default(false)
  booking          Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("guests")
}

model Payment {
  id                    String    @id @default(cuid())
  bookingId             String
  stripePaymentIntentId String?   @unique(map: "payments_stripePaymentId_key")
  amount                Int
  currency              String    @default("eur")
  status                String    @default("pending") @db.VarChar(50)
  paidAt                DateTime?
  createdAt             DateTime  @default(now())
  booking               Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model VirtualKey {
  id            String         @id @default(cuid())
  bookingId     String
  keyType       VirtualKeyType
  nukiKeyId     String         @unique
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  deactivatedAt DateTime?
  booking       Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("virtual_keys")
}

model WebhookLog {
  id            String   @id @default(cuid())
  eventType     String   @db.VarChar(100)
  status        String   @db.VarChar(20) // 'success' or 'error'
  message       String   @db.VarChar(500)
  reservationId String?  @db.VarChar(50)
  error         String?  @db.Text
  createdAt     DateTime @default(now())

  // Index for efficient cleanup and querying
  @@index([createdAt])
  @@map("webhook_logs")
}

model UbyPortExport {
  id              String            @id @default(cuid())
  bookingId       String
  exportDate      DateTime          // The check-in date when export was triggered
  status          UbyPortStatus     @default(PENDING)
  exportData      String            @db.Text // JSON string of the exported data
  submittedAt     DateTime?         // When data was sent to Czech police
  errorMessage    String?           @db.Text
  retryCount      Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  booking         Booking           @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  // Index for efficient querying
  @@index([exportDate])
  @@index([status])
  @@unique([bookingId]) // One export record per booking
  @@map("ubyport_exports")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  PAYMENT_PENDING
  PAYMENT_COMPLETED
  KEYS_DISTRIBUTED
  COMPLETED
  CANCELLED
}

enum VirtualKeyType {
  MAIN_ENTRANCE
  LUGGAGE_ROOM
  LAUNDRY_ROOM
  ROOM
}

enum UbyPortStatus {
  PENDING
  EXPORTED
  SUBMITTED
  FAILED
}
