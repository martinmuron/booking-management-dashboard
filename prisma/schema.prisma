generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id               String        @id @default(cuid())
  hostAwayId       String        @unique
  propertyName     String
  guestLeaderName  String
  guestLeaderEmail String
  guestLeaderPhone String?
  checkInDate      DateTime
  checkOutDate     DateTime
  numberOfGuests   Int
  roomNumber       String?
  checkInToken     String        @unique
  status           BookingStatus @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  guests           Guest[]
  payments         Payment[]
  virtualKeys      VirtualKey[]

  @@map("bookings")
}

model Guest {
  id               String   @id @default(cuid())
  bookingId        String
  firstName        String
  lastName         String
  birthDate        DateTime
  nationality      String
  sex              GuestSex
  residenceCountry String
  email            String
  phone            String?
  createdAt        DateTime @default(now())
  booking          Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("guests")
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String
  stripePaymentId String        @unique
  amount          Int
  currency        String        @default("CZK")
  status          PaymentStatus @default(PENDING)
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model VirtualKey {
  id            String         @id @default(cuid())
  bookingId     String
  keyType       VirtualKeyType
  nukiKeyId     String         @unique
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  deactivatedAt DateTime?
  booking       Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("virtual_keys")
}

enum BookingStatus {
  PENDING
  CHECKED_IN
  PAYMENT_PENDING
  PAYMENT_COMPLETED
  KEYS_DISTRIBUTED
  COMPLETED
}

enum GuestSex {
  MALE
  FEMALE
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
}

enum VirtualKeyType {
  MAIN_ENTRANCE
  LUGGAGE_ROOM
  LAUNDRY_ROOM
  ROOM
}
