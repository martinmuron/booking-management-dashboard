Nuki Web API Documentation
Base URL
https://api.nuki.io
Authentication
OAuth 2.0 (Recommended)
1.	Authorization Request
2.	GET https://api.nuki.io/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=CALLBACK_URL&scope=SCOPES
3.	Token Exchange
4.	curl -X POST https://api.nuki.io/oauth/token \
5.	  -H "Content-Type: application/x-www-form-urlencoded" \
6.	  -d "grant_type=authorization_code&code=AUTHORIZATION_CODE&client_id=CLIENT_ID&client_secret=CLIENT_SECRET&redirect_uri=CALLBACK_URL"
7.	Refresh Token
8.	curl -X POST https://api.nuki.io/oauth/token \
9.	  -H "Content-Type: application/x-www-form-urlencoded" \
10.	  -d "grant_type=refresh_token&client_id=CLIENT_ID&client_secret=CLIENT_SECRET&refresh_token=REFRESH_TOKEN"
API Token (Simple)
curl -H "Authorization: Bearer YOUR_API_TOKEN" https://api.nuki.io/smartlock
Device ID Conversion (HEX to Decimal)
Device Type	Prefix	Example HEX	Calculated HEX	Decimal ID
Smart Lock 1/2	0	1A2B3C4D	1A2B3C4D	439041101
Box	1	1A2B3C4D	11A2B3C4D	4734008397
Opener	2	1A2B3C4D	21A2B3C4D	9028975693
Smart Door	3	1A2B3C4D	31A2B3C4D	13323942989
Smart Lock 3/4	4	1A2B3C4D	41A2B3C4D	17618910285
Smart Lock Ultra	5	1A2B3C4D	51A2B3C4D	21913877581
Core Endpoints
Device Management
Get All Devices
GET /smartlock
curl -H "Authorization: Bearer TOKEN" https://api.nuki.io/smartlock
Get Device Details
GET /smartlock/{smartlockId}
curl -H "Authorization: Bearer TOKEN" https://api.nuki.io/smartlock/DEVICE_ID
Check Device Status
•	serverState: 0 = online, 4 = offline
•	state: Device-specific state (see Device States section)
Device Actions
Lock Device
POST /smartlock/{smartlockId}/action/lock
curl -X POST -H "Authorization: Bearer TOKEN" https://api.nuki.io/smartlock/DEVICE_ID/action/lock
Unlock Device
POST /smartlock/{smartlockId}/action/unlock
curl -X POST -H "Authorization: Bearer TOKEN" https://api.nuki.io/smartlock/DEVICE_ID/action/unlock
Custom Action
POST /smartlock/{smartlockId}/action
curl -X POST -H "Authorization: Bearer TOKEN" -H "Content-Type: application/json" \
  -d '{"action": 1}' https://api.nuki.io/smartlock/DEVICE_ID/action
Action Codes:
•	1: Unlock
•	2: Lock
•	3: Unlatch (unlock and open)
•	4: Lock'n'Go
•	5: Lock'n'Go with unlatch
User Management
Create User
PUT /account/user
curl -X PUT -H "Authorization: Bearer TOKEN" -H "Content-Type: application/json" \
  -d '{
    "email": "user@example.com",
    "name": "John Doe",
    "language": "en"
  }' https://api.nuki.io/account/user
Create Authorization
PUT /smartlock/auth
curl -X PUT -H "Authorization: Bearer TOKEN" -H "Content-Type: application/json" \
  -d '{
    "name": "John Doe Access",
    "accountUserId": "USER_ID",
    "type": 0,
    "smartlockIds": ["DEVICE_ID"]
  }' https://api.nuki.io/smartlock/auth
Create Keypad Code
PUT /smartlock/auth
curl -X PUT -H "Authorization: Bearer TOKEN" -H "Content-Type: application/json" \
  -d '{
    "name": "Guest Code",
    "type": 13,
    "code": "123456",
    "smartlockIds": ["DEVICE_ID"]
  }' https://api.nuki.io/smartlock/auth
Time-Limited Access
PUT /smartlock/auth
curl -X PUT -H "Authorization: Bearer TOKEN" -H "Content-Type: application/json" \
  -d '{
    "name": "Temporary Access",
    "accountUserId": "USER_ID",
    "type": 0,
    "smartlockIds": ["DEVICE_ID"],
    "allowedFromDate": "2024-01-01T10:00:00.000Z",
    "allowedUntilDate": "2024-01-07T18:00:00.000Z",
    "allowedWeekDays": 127
  }' https://api.nuki.io/smartlock/auth
Activity Logs
Get Device Logs
GET /smartlock/{smartlockId}/log
curl -H "Authorization: Bearer TOKEN" https://api.nuki.io/smartlock/DEVICE_ID/log
Device States
Smart Lock States
•	0: Uncalibrated
•	1: Locked
•	2: Unlocking
•	3: Unlocked
•	4: Locking
•	5: Unlatched
•	6: Unlocked (Lock'n'Go)
•	7: Unlatching
•	254: Motor blocked
•	255: Undefined
Opener States
•	0: Untrained
•	1: Online
•	3: Ring to Open active
•	5: Open
•	7: Opening
•	255: Undefined
Smart Door States
•	0: Not activated
•	1: Locked
•	2: Unlocking
•	3: Unlocked
•	4: Locking
•	5: Unlatched
•	6: Unlocked (Lock'n'Go)
•	7: Unlatching
•	254: Motor blocked
•	255: Undefined
Webhooks (Advanced API)
Central Webhook Setup
1.	Apply for Advanced API access
2.	Set webhook URL in Nuki Web
3.	Authorize with webhook.central scope
4.	Enable webhook features
Decentral Webhook Setup
PUT /api/decentralWebhook
curl -X PUT -H "Authorization: Bearer TOKEN" -H "Content-Type: application/json" \
  -d '{
    "webhookFeatures": ["DEVICE_STATUS", "DEVICE_LOGS"],
    "webhookUrl": "https://your-webhook-url.com"
  }' https://api.nuki.io/api/decentralWebhook
Webhook Features
•	DEVICE_STATUS: Device state changes
•	DEVICE_MASTERDATA: Device information changes
•	DEVICE_CONFIG: Configuration changes
•	DEVICE_LOGS: New activity logs
•	DEVICE_AUTHS: Authorization changes
•	ACCOUNT_USER: User account changes
Scopes
Scope	Description
account	Manage Nuki Web account
smartlock	Full device access
smartlock.readonly	View devices only
smartlock.action	Control devices
smartlock.auth	Manage authorizations
smartlock.config	Change device settings
smartlock.log	Access activity logs
notification	Manage notifications
webhook.central	Central webhooks
webhook.decentral	Decentral webhooks
Common Parameters
Authorization Types
•	0: App user
•	1: Bridge
•	2: Fob
•	3: Keypad
•	13: Keypad code
•	14: Z-key
•	15: Virtual
Week Days Bitmask
•	Monday: 64
•	Tuesday: 32
•	Wednesday: 16
•	Thursday: 8
•	Friday: 4
•	Saturday: 2
•	Sunday: 1
Example: Monday-Friday = 64+32+16+8+4 = 124
Time Format
•	Times in UTC: "2024-01-01T10:00:00.000Z"
•	Time of day in minutes from midnight: 600 = 10:00 AM
Response Codes
Code	Description
200	Success
204	OK (async operation)
400	Bad request
401	Unauthorized
403	Forbidden
404	Not found
429	Rate limited
Error Handling
•	Check serverState for device connectivity
•	Use webhooks for real-time status updates
•	Implement retry logic for failed operations
•	Monitor webhook error rates (keep under 5%)
Best Practices
1.	Use OAuth 2.0 for production applications
2.	Monitor device status before sending commands
3.	Implement webhooks instead of polling
4.	Handle async operations - 200 response doesn't guarantee success
5.	Clean up expired authorizations regularly
6.	Use time restrictions for temporary access
7.	Validate device compatibility before operations

