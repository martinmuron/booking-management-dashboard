Hostway API Documentation
Overview
The Hostway API provides programmatic access to manage listings, reservations, and other platform resources. This RESTful API uses JSON for data exchange and implements standard HTTP methods and status codes.
Data Type Conventions
•	Boolean values: Represented as integers 0 (false) or 1 (true)
•	Time values: All timestamps are in UTC timezone, except for the following Listing object fields which use the listing's local timezone: 
o	checkInTimeStart
o	checkInTimeEnd
o	checkOutTime
•	Country codes: Follow the ISO 3166-2 standard
Standard Response Format
Most API endpoints return responses in the following standardized format:
{
    "status": "success",
    "result": "Endpoint result goes here",
    "limit": null,
    "offset": null,
    "count": 1,
    "page": 1,
    "totalPages": 1
}
Response Fields
Field	Type	Description
status	string	Response status: "success" for successful requests, "fail" for errors
result	mixed	Contains the endpoint result data on success, or error message string on failure
limit	integer/null	Maximum number of records to return (pagination)
offset	integer/null	Starting position for records (pagination)
count	integer	Total number of records matching the query filters
page	integer	Current page number
totalPages	integer	Total number of pages available
Authentication
Hostway uses the Client Credentials Grant of OAuth 2.0 protocol for API authentication.
Generate Access Token
Endpoint: POST https://api.hostaway.com/v1/accessTokens
Headers:
Content-Type: application/x-www-form-urlencoded
Cache-Control: no-cache
Request Parameters:
Parameter	Required	Type	Description
grant_type	Yes	string	Must be client_credentials
client_id	Yes	integer	Your Hostway account ID
client_secret	Yes	string	Client secret (available in your Hostway dashboard)
scope	Yes	string	Must be general
Example Request:
curl -X POST \
  https://api.hostaway.com/v1/accessTokens \
  -H 'Cache-control: no-cache' \
  -H 'Content-type: application/x-www-form-urlencoded' \
  -d 'grant_type=client_credentials&client_id={your_account_id}&client_secret={your_client_secret}&scope=general'
Response:
{
    "token_type": "Bearer",
    "expires_in": 15897600,
    "access_token": "yournewaccesstoken"
}
Response Fields:
Field	Type	Description
token_type	string	Always returns "Bearer"
expires_in	integer	Time to live (TTL) in seconds (24 months)
access_token	string	JWT token signed with the authorization server's private key
Using Access Tokens
Include the access token in the Authorization header for all API requests:
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...
Token Management Best Practices
1.	Store tokens securely: Save tokens in a secure location (database, encrypted storage)
2.	Check expiration: Verify token validity before making requests
3.	Handle 403 responses: Refresh tokens when receiving authorization errors
4.	Avoid frequent generation: Do not create new tokens for each API call
⚠️ Security Notice: Keep your API secret and access tokens strictly private.
Revoke Access Token
Endpoint: DELETE https://api.hostaway.com/v1/accessTokens
Query Parameters:
Parameter	Required	Type	Description
token	Yes	string	The access token to revoke
Example Request:
curl --location --request DELETE 'https://api.hostaway.com/v1/accessTokens?token=your_token_here' \
--header 'Content-type: application/x-www-form-urlencoded'
Response:
{
    "status": "success",
    "result": []
}
Revoked tokens can no longer be used to access API endpoints.
Rate Limits
To ensure optimal performance and security, the API enforces the following rate limits:
Limit	Time Frame	Scope
15 requests	10 seconds	Per IP address
20 requests	10 seconds	Per account ID
Rate Limit Best Practices
•	Distribute API calls throughout the day rather than in bursts
•	Implement queuing mechanisms to process requests gradually
•	Handle HTTP 429 responses gracefully with retry logic
Rate Limit Exceeded Response
When rate limits are exceeded, the API returns:
HTTP/1.1 429 Too Many Requests
Resource Inclusion Behavior
To optimize performance, certain endpoints require an explicit parameter to include related resources in the response.
Affected Endpoints
Add the query parameter includeResources=1 to include attached objects:
Reservations Endpoint
GET {baseUrl}/v1/reservations?includeResources=1
Affected fields:
•	customFieldValues
•	reservationFees
•	reservationUnit
•	hostProxyEmail
Without includeResources=1, these fields return empty:
{
    "customFieldValues": [],
    "reservationFees": [],
    "reservationUnit": [],
    "hostProxyEmail": null
}
Calendar Endpoint
GET {baseUrl}/v1/listings/{listingId}/calendar?includeResources=1
Affected fields:
•	reservations
Without includeResources=1, this field returns empty:
{
    "reservations": []
}
Webhooks
Webhooks enable real-time notifications when events occur on the Hostway platform, eliminating the need for constant API polling.
Webhook Configuration
To set up webhooks, provide the following information:
Parameter	Required	Description
URL	Yes	Endpoint where Hostway will send webhook notifications
Login	No	Username for webhook authentication header
Password	No	Password for webhook authentication header
Recipient email	No	Email for webhook delivery failure notifications (defaults to account owner)
Webhook Delivery
•	Retry Policy: 3 attempts for failed deliveries
•	Failure Handling: After 3 failed attempts, an email alert is sent to the configured recipient
•	Response Requirement: Your endpoint must return a successful HTTP status code
Supported Events
Your system should handle all current and future webhook events:
Event	Trigger
reservation created	New reservation created from any channel
reservation updated	Existing reservation modified
new message received	New message added to a conversation
Note: The webhook system sends all events without filtering. Implement filtering logic in your application to handle only relevant events.
Error Handling
HTTP Status Codes
Code	Description
200	Success
400	Bad Request - Invalid parameters
401	Unauthorized - Invalid or missing access token
403	Forbidden - Token expired or insufficient permissions
404	Not Found - Resource does not exist
429	Too Many Requests - Rate limit exceeded
500	Internal Server Error
Error Response Format
Error responses follow the standard format with status: "fail":
{
    "status": "fail",
    "result": "Error message describing what went wrong",
    "limit": null,
    "offset": null,
    "count": 0,
    "page": 1,
    "totalPages": 1
}
Listings
Listings represent properties available for rental on the Hostway platform. Each listing contains detailed information about the property, pricing, availability, and booking rules.
Listing Object
The listing object contains comprehensive property information including location, pricing, amenities, and booking policies.
Example Listing Object:
{
  "id": 40160,
  "propertyTypeId": 1,
  "name": "Beautiful and cozy apartment close to city center",
  "externalListingName": "Beautiful and cozy apartment close to city center",
  "internalListingName": "Property #3",
  "description": "In a classic Bremerhaven house we rent out our apartment...",
  "address": "Schulstraße 7, Bremerhaven, Bremen 27570, Germany",
  "price": 211.62,
  "personCapacity": 6,
  "currencyCode": "USD",
  "listingAmenities": [
    {
      "id": 3449,
      "amenityId": 2
    }
  ],
  "listingImages": [
    {
      "id": 877,
      "caption": "Kitchen",
      "url": "https://example.com/image.jpg",
      "sortOrder": 1
    }
  ]
}
Listing Properties:
Property	Required	Type	Description
id	Yes	integer	Unique listing identifier
propertyTypeId	No	integer	Property type identifier
name	Yes*	string	Listing name
externalListingName	Yes*	string	External listing name (same as name)
internalListingName	No	string	Internal reference name
description	No	string	Property description
address	Yes*	string	Full property address
price	Yes*	float	Base nightly price
personCapacity	No	integer	Maximum guest capacity
guestsIncluded	Yes*	integer	Number of guests included in base price
priceForExtraPerson	Yes*	float	Additional cost per extra person
currencyCode	Yes*	string	Currency code (ISO format)
lat	No	float	Latitude coordinate
lng	No	float	Longitude coordinate
checkInTimeStart	No	integer	Check-in start time (0-23, listing timezone)
checkInTimeEnd	No	integer	Check-in end time (0-23, listing timezone)
checkOutTime	No	integer	Check-out time (0-23, listing timezone)
minNights	No	integer	Minimum stay requirement
maxNights	No	integer	Maximum stay allowed
instantBookable	No	boolean	Instant booking enabled (0/1)
cancellationPolicy	No	string	One of: flexible, moderate, strict
roomType	No	string	One of: entire_home, private_room, shared_room
bathroomType	No	string	One of: private, shared
bedroomsNumber	No	integer	Number of bedrooms
bedsNumber	No	integer	Number of beds
bathroomsNumber	No	integer	Number of bathrooms
cleaningFee	No	float	Cleaning fee amount
timeZoneName	No	string	Property timezone
listingAmenities	No	array	Array of amenity objects
listingBedTypes	No	array	Array of bed type objects
listingImages	No	array	Array of image objects
customFieldValues	No	array	Custom field values
Fields marked with asterisk () are required for complete listing status.
Related Objects
Listing Amenity Object
{
    "id": 3449,
    "amenityId": 2
}
Property	Required	Type	Description
id	Yes	integer	Unique amenity association ID
amenityId	Yes	integer	Amenity type identifier
Listing Bed Type Object
{
    "id": 1,
    "bedTypeId": 2,
    "quantity": 1
}
Property	Required	Type	Description
id	Yes	integer	Unique bed type association ID
bedTypeId	Yes	integer	Bed type identifier
quantity	Yes	integer	Number of beds of this type
Listing Image Object
{
    "id": 877,
    "caption": "Kitchen",
    "vrboCaption": "Kitchen",
    "airbnbCaption": "Kitchen",
    "url": "https://example.com/image.jpg",
    "sortOrder": 2
}
Property	Required	Type	Description
id	Yes	integer	Unique image ID
caption	No	string	General image caption
vrboCaption	No	string	VRBO-specific caption
airbnbCaption	No	string	Airbnb-specific caption
url	Yes	string	Image URL
sortOrder	No	integer	Display order
Listing Endpoints
Retrieve Listings List
Endpoint: GET https://api.hostaway.com/v1/listings
Query Parameters:
Parameter	Required	Type	Description
limit	No	integer	Maximum number of items to return
offset	No	integer	Number of items to skip
sortOrder	No	string	Sort order: name, nameReversed, order, orderReversed, contactName, contactNameReversed, latestActivity, latestActivityDesc
city	No	string	Filter by city
match	No	string	Search by listing name
country	No	string	Filter by country
contactName	No	string	Filter by contact name
propertyTypeId	No	integer	Filter by property type
includeResources	No	integer	Include related resources (0/1)
attachObjects[]	No	array	Attach specific objects (e.g., bookingEngineUrls)
availabilityDateStart	No	string	Availability start date (Y-m-d)
availabilityDateEnd	No	string	Availability end date (Y-m-d)
availabilityGuestNumber	No	integer	Guest capacity filter
Example Request:
curl --request GET \
  --url 'https://api.hostaway.com/v1/listings?limit=10&includeResources=1' \
  --header 'Authorization: Bearer your_access_token' \
  --header 'Cache-control: no-cache'
Response: Array of listing objects in standard response format.
Retrieve Single Listing
Endpoint: GET https://api.hostaway.com/v1/listings/{listingId}
Query Parameters:
Parameter	Required	Type	Description
includeResources	No	integer	Include related resources (0/1)
attachObjects[]	No	array	Attach specific objects
Example Request:
curl --request GET \
  --url 'https://api.hostaway.com/v1/listings/40160' \
  --header 'Authorization: Bearer your_access_token' \
  --header 'Cache-control: no-cache'
Response: Single listing object in standard response format.
Create Listing
Endpoint: POST https://api.hostaway.com/v1/listings
Request Body: Complete listing object with required fields.
Example Request:
curl --request POST \
  --url https://api.hostaway.com/v1/listings \
  --header 'Authorization: Bearer your_access_token' \
  --header 'Content-type: application/json' \
  --data '{
    "name": "Beautiful apartment",
    "externalListingName": "Beautiful apartment",
    "address": "123 Main St, City, State 12345, Country",
    "price": 150.00,
    "guestsIncluded": 2,
    "priceForExtraPerson": 25.00,
    "currencyCode": "USD"
  }'
Response: Created listing object or error response.
Update Listing
Endpoint: PUT https://api.hostaway.com/v1/listings/{listingId}
Request Body: Listing object with fields to update.
Response: Updated listing object or error response.
Delete Listing
Endpoint: DELETE https://api.hostaway.com/v1/listings/{listingId}
Response: Empty success response or error response.
Export Listing to Airbnb
Creates a listing export job to Airbnb. Export completes in approximately 5-10 minutes.
Endpoint: POST https://api.hostaway.com/v1/listings/{listingId}/export/airbnb
Response: Empty success response or error response.
Listing Fee Settings
Manage additional fees that can be applied to reservations.
Get Listing Fee Settings
Endpoint: GET https://api.hostaway.com/v1/listingFeeSettings/{listingId}
Response Example:
{
  "status": "success",
  "result": [
    {
      "id": 2,
      "feeType": "parkingFee",
      "feeTitle": null,
      "feeAppliedPer": "base_rate",
      "amount": 1000,
      "amountType": "flat",
      "isMandatory": 0,
      "isQuantitySelectable": 1
    }
  ]
}
Fee Types: additionalCleaningFee, parkingFee, towelChangeFee, midstayCleaningFee, roomRequestFee, reservationChangeFee, lateCheckoutFee, otherFees, creditCardFee, petFee, serviceFee, bookingFee, tourismFee, resortFee
Fee Applied Per: reservation, person, night, person_per_night
Amount Type: percent, flat
Add Listing Fee Settings
Endpoint: POST https://api.hostaway.com/v1/listingFeeSettings/{listingId}
Update Listing Fee Settings
Endpoint: PUT https://api.hostaway.com/v1/listingFeeSettings/{listingId}
Delete Listing Fee Settings
Endpoint: DELETE https://api.hostaway.com/v1/listingFeeSettings/{id}
Listing Agreements
Manage rental agreements for listings.
Get Listing Agreement
Endpoint: GET https://api.hostaway.com/v1/listingAgreement/{listingId}
Add/Update Listing Agreement
Endpoint: POST/PUT https://api.hostaway.com/v1/listingAgreement/{listingId}
Request Body:
{
    "text": "Agreement text with {{template_variables}}"
}
Duplicate Listing Agreement
Endpoint: POST https://api.hostaway.com/v1/listingAgreement/duplicate
Request Body:
{
    "listingId": 40270,
    "listingIds": [40271, 40272]
}
Listing Price Settings
Manage length of stay (LOS) pricing settings for different channels.
Get Listing Price Settings
Endpoint: GET https://api.hostaway.com/v1/listing/pricingSettings/{listingId}
Update Listing Price Settings
Endpoint: PUT https://api.hostaway.com/v1/listing/pricingSettings/{listingId}
Request Body:
{
    "isAirbnbLOSActive": 1,
    "isBookingLOSActive": 0,
    "isVrboLOSActive": 1,
    "isExpediaLOSActive": 0
}
Listing Units
For properties with multiple units (e.g., apartment buildings).
Listing Unit Object
{
    "id": 1,
    "name": "Apartment",
    "ground": "2",
    "unitNumber": "234",
    "listingMapIdUnit": "2"
}
Get Listing Units
Endpoint: GET https://api.hostaway.com/v1/listingUnits/{listingMapId}
Response: Array of listing unit objects.
Cancellation Policies
Manage cancellation policies for direct channel bookings.
Cancellation Policy Object
{
  "id": 2,
  "accountId": 1,
  "name": "Flexible",
  "cancellationPolicyItem": [
    {
      "id": "1",
      "refundAmount": "100",
      "refundType": "percentage",
      "refundField": "totalPrice",
      "timeDelta": "-1209600",
      "event": "arrival"
    }
  ]
}
Note: These policies apply to direct channel bookings. For OTA cancellation policies, refer to the listing object's cancellationPolicy property.
 
Reservations
Reservations represent bookings made for listings through various channels. The reservation system handles booking management, pricing calculations, guest information, and financial details.
Reservation Object
The reservation object contains comprehensive booking information including guest details, dates, pricing, and channel-specific data.
Example Reservation Object:
{
    "id": 13,
    "listingMapId": 40160,
    "channelId": 2001,
    "channelName": "airbnb",
    "reservationId": "10450-40160-thread313906227-9586017324",
    "guestName": "Andrew Peterson",
    "guestFirstName": "Andrew",
    "guestLastName": "Peterson",
    "guestEmail": "mail@test.com",
    "numberOfGuests": 1,
    "adults": 1,
    "arrivalDate": "2017-07-15",
    "departureDate": "2017-07-16",
    "nights": 1,
    "totalPrice": 267,
    "currency": "USD",
    "status": "new",
    "confirmationCode": "HMP2KQ4B44",
    "customFieldValues": [
        {
            "customFieldId": 167,
            "value": "Custom field value one"
        }
    ],
    "financeField": [
        {
            "id": 1,
            "type": "fee",
            "name": "checkinFee",
            "title": "Checkin fee",
            "value": 1000,
            "total": 69
        }
    ]
}
Core Reservation Properties:
Property	Required	Type	Description
id	Yes	integer	Unique reservation ID on Hostway
listingMapId	Yes	integer	Associated listing identifier
channelId	Yes	integer	Channel identifier (see Channel IDs)
channelName	Yes	string	Channel name (Airbnb, Booking.com, etc.)
reservationId	Yes	string	Channel-specific reservation ID
hostawayReservationId	Yes	integer	Same as id
channelReservationId	Yes	string	Same as reservationId
status	No	string	Reservation status (see Status Types)
arrivalDate	Yes	date	Check-in date (YYYY-MM-DD)
departureDate	Yes	date	Check-out date (YYYY-MM-DD)
nights	No	integer	Number of nights
totalPrice	No	float	Total reservation price
currency	No	string	Currency code
Guest Information:
Property	Type	Description
guestName	string	Full guest name
guestFirstName	string	Guest first name
guestLastName	string	Guest last name
guestEmail	string	Guest email address
guestAddress	string	Guest address
guestCity	string	Guest city
guestCountry	string	Guest country
guestZipCode	string	Guest ZIP code
phone	string	Guest phone number
numberOfGuests	integer	Total number of guests
adults	integer	Number of adults
children	integer	Number of children
infants	integer	Number of infants
pets	integer	Number of pets
Verification & Details:
Property	Type	Description
isGuestIdentityVerified	boolean	Guest identity verification status
isGuestVerifiedByEmail	boolean	Email verification status
isGuestVerifiedByPhone	boolean	Phone verification status
guestRecommendations	integer	Number of guest recommendations
guestTrips	integer	Number of previous trips
checkInTime	integer	Check-in time
checkOutTime	integer	Check-out time
doorCode	string	Property access code
confirmationCode	string	Booking confirmation code
Financial Information:
Property	Type	Description
totalPrice	float	Total reservation cost
taxAmount	float	Tax amount
cleaningFee	float	Cleaning fee
securityDepositFee	float	Security deposit
channelCommissionAmount	float	Channel commission
hostawayCommissionAmount	float	Hostway commission
isPaid	boolean	Payment status
remainingBalance	float	Outstanding balance
Related Objects
Reservation Fee Object
{
    "id": 123,
    "accountId": 456,
    "listingMapId": 111,
    "reservationId": 222,
    "name": "Test",
    "amount": 5.12345,
    "currency": "EUR",
    "percentage": 10,
    "isIncluded": 0,
    "isPerNight": 1,
    "isPerPerson": 0,
    "isImported": 1
}
Property	Required	Type	Description
name	Yes	string	Fee name (channel-specific)
amount	No	decimal	Fee amount
currency	No	string	Currency code
percentage	No	integer	Fee percentage (0-100)
isIncluded	No	integer	Already included in total (0/1)
isPerNight	No	integer	Applied per night (0/1)
isPerPerson	No	integer	Applied per guest (0/1)
Reservation Unit Object
For multi-unit reservations:
{
    "id": 123,
    "reservationId": 111,
    "listingUnitId": 222,
    "guestName": "Michael",
    "numberOfGuests": 1,
    "adults": 1,
    "totalPrice": 300
}
Reservation Statuses
Status	Description
new	New reservation, blocks calendar
modified	Modified reservation (dates, guests, pricing)
cancelled	Cancelled by host or guest, doesn't block calendar
ownerStay	Owner blocking property for personal use
pending	Awaiting host approval (Airbnb Request to Book)
awaitingPayment	Awaiting guest payment completion
declined	Host declined the request
expired	Request expired without action
unconfirmed	VRBO Request to Book awaiting approval
inquiry	Guest question, doesn't block calendar
inquiryPreapproved	Host preapproved inquiry
inquiryDenied	Host denied inquiry
inquiryTimedout	Inquiry timed out
inquiryNotPossible	Inquiry cannot proceed
Channel IDs
Channel ID	Channel Name
2018	airbnbOfficial
2002	homeaway
2005	bookingcom
2007	expedia
2000	direct
2013	bookingengine
2019	marriott
2020	partner
2022	google
Reservation Endpoints
Retrieve Reservations List
Endpoint: GET https://api.hostaway.com/v1/reservations
Query Parameters:
Parameter	Required	Type	Description
limit	No	integer	Maximum items (default: 100)
offset	No	integer	Items to skip
sortOrder	No	string	Sort order: arrivalDate, arrivalDateDesc, lastConversationMessageSent, latestActivity, etc.
channelId	No	integer	Filter by channel
listingId	No	integer	Filter by listing
assigneeUserId	No	integer	Filter by assigned user
match	No	string	Search by guest name
arrivalStartDate	No	date	Arrival date range start
arrivalEndDate	No	date	Arrival date range end
departureStartDate	No	date	Departure date range start
departureEndDate	No	date	Departure date range end
hasUnreadConversationMessages	No	boolean	Filter by unread messages
isStarred	No	boolean	Filter starred reservations
isArchived	No	boolean	Filter archived reservations
guestEmail	No	string	Filter by guest email
includeResources	No	integer	Include related resources (0/1)
Example Request:
curl -X GET \
  'https://api.hostaway.com/v1/reservations?limit=10&channelId=2018&includeResources=1' \
  -H 'Authorization: Bearer your_access_token' \
  -H 'Cache-control: no-cache'
Response: Array of reservation objects in standard response format.
Retrieve Single Reservation
Endpoint: GET https://api.hostaway.com/v1/reservations/{reservationId}
Example Request:
curl -X GET \
  https://api.hostaway.com/v1/reservations/13 \
  -H 'Authorization: Bearer your_access_token' \
  -H 'Cache-control: no-cache'
Response: Single reservation object in standard response format.
Create Reservation
Endpoint: POST https://api.hostaway.com/v1/reservations
Query Parameters:
Parameter	Required	Type	Description
forceOverbooking	No	integer	Ignore overbooking protection
validatePaymentMethod	No	integer	Validate credit card during creation
Required Fields:
•	channelId (see Channel IDs)
•	listingMapId
•	arrivalDate
•	departureDate
•	guestFirstName
•	guestLastName
•	guestEmail
Example Request:
curl -X POST \
  https://api.hostaway.com/v1/reservations?forceOverbooking=1 \
  -H 'Authorization: Bearer your_access_token' \
  -H 'Content-type: application/json' \
  -d '{
    "channelId": 2000,
    "listingMapId": 40160,
    "guestFirstName": "Andrew",
    "guestLastName": "Peterson",
    "guestEmail": "mail@test.com",
    "arrivalDate": "2024-12-01",
    "departureDate": "2024-12-03",
    "numberOfGuests": 2,
    "adults": 2,
    "totalPrice": 267,
    "currency": "USD"
  }'
Create Reservation with Credit Card Validation
Include credit card fields when using validatePaymentMethod=1:
Additional Fields:
•	ccNumber: Credit card number
•	ccName: Cardholder name
•	ccExpirationYear: Expiration year
•	ccExpirationMonth: Expiration month
•	cvc: Security code
Create Reservation with Price Details
Use the price calculator to get detailed pricing breakdown:
Request Body Example:
{
    "channelId": 2000,
    "listingMapId": 40160,
    "guestFirstName": "Andrew",
    "guestLastName": "Peterson",
    "guestEmail": "andrew@example.com",
    "arrivalDate": "2024-12-01",
    "departureDate": "2024-12-03",
    "totalPrice": 13520,
    "financeField": [
        {
            "type": "price",
            "name": "baseRate",
            "title": "Base rate",
            "value": 12320,
            "total": 12320,
            "isIncludedInTotalPrice": 1
        },
        {
            "type": "fee",
            "name": "cleaningFee",
            "title": "Cleaning fee",
            "value": 500,
            "total": 500,
            "isIncludedInTotalPrice": 1
        }
    ]
}
Update Reservation
Endpoint: PUT https://api.hostaway.com/v1/reservations/{reservationId}
Query Parameters:
Parameter	Required	Type	Description
forceOverbooking	No	integer	Ignore overbooking protection
Note: Cannot update listingMapId through this endpoint.
Cancel Reservation
Endpoint: PUT https://api.hostaway.com/v1/reservations/{reservationId}/statuses/cancelled
Request Body:
{
    "cancelledBy": "guest"
}
cancelledBy values: host or guest
Delete Reservation
Endpoint: DELETE https://api.hostaway.com/v1/reservations/{reservationId}
Reservation Price Calculation
Calculate accurate pricing including fees, taxes, and discounts before creating reservations.
Calculate Reservation Price
Endpoint: POST https://api.hostaway.com/v1/listings/{listingId}/calendar/priceDetails
Request Body:
{
    "startingDate": "2024-12-01",
    "endingDate": "2024-12-03",
    "numberOfGuests": 2,
    "markup": 1.1,
    "reservationCouponId": 1,
    "version": 2
}
Request Parameters:
Parameter	Required	Type	Description
startingDate	Yes	date	Arrival date (YYYY-MM-DD)
endingDate	Yes	date	Departure date (YYYY-MM-DD)
numberOfGuests	Yes	integer	Number of guests
markup	No	float	Markup multiplier (>1.0)
reservationCouponId	No	integer	Coupon to apply
version	Yes	integer	Use version 2
components	No	array	Custom price components
Response:
{
    "status": "success",
    "result": {
        "totalPrice": 13520,
        "components": [
            {
                "type": "price",
                "name": "baseRate",
                "title": "Base rate",
                "value": 12320,
                "total": 12320,
                "isIncludedInTotalPrice": 1
            },
            {
                "type": "fee",
                "name": "cleaningFee",
                "title": "Cleaning fee",
                "value": 500,
                "total": 500,
                "isIncludedInTotalPrice": 1
            }
        ]
    }
}
Price Component Object
Property	Type	Description
listingFeeSettingId	integer	Fee setting ID
type	string	Component type: price, tax, fee, discount
name	string	Component name
title	string	Display title
value	float	Component price
total	float	Total amount
isIncludedInTotalPrice	integer	Included in total (0/1)
isOverriddenByUser	integer	Manually modified (0/1)
isMandatory	integer	Required component (0/1)
isQuantitySelectable	integer	Quantity can be selected (0/1)
quantity	integer	Component quantity
Calculate Price with Extras
Add optional extras to price calculation:
Request Body:
{
    "startingDate": "2024-12-01",
    "endingDate": "2024-12-03",
    "numberOfGuests": 2,
    "version": 2,
    "components": [
        {
            "listingFeeSettingId": 17643,
            "name": "childrenExtraFee"
        }
    ]
}
Set Manual Component Values
Override component pricing:
Request Body:
{
    "startingDate": "2024-12-01",
    "endingDate": "2024-12-03",
    "numberOfGuests": 2,
    "version": 2,
    "components": [
        {
            "listingFeeSettingId": 17643,
            "name": "childrenExtraFee",
            "isOverriddenByUser": 1,
            "value": 500
        }
    ]
}
Price Calculation Workflow
1.	Calculate Price: Use the price calculation endpoint to get accurate pricing
2.	Review Components: Examine the returned price breakdown
3.	Create Reservation: Use the components array as financeField in reservation creation
4.	Apply Coupons: Include couponName in reservation object if applicable
Financial Components Management
Update Reservation Finance Fields
Modify pricing components in existing reservations:
curl --location --request PUT 'https://api.hostaway.com/v1/reservations/14150462' \
--header 'Authorization: Bearer your_access_token' \
--header 'Content-type: application/json' \
--data-raw '{
    "financeField": [
        {
            "id": 13303244,
            "value": 91002,
            "isOverriddenByUser": 1
        }
    ],
    "totalPrice": 91002
}'
Delete Finance Components
Remove components by setting isDeleted: 1:
{
    "financeField": [
        {
            "id": 13303244,
            "isDeleted": 1
        }
    ],
    "totalPrice": 91002
}
Important Notes:
•	Always update totalPrice when modifying components
•	Set isOverriddenByUser: 1 for manual changes
•	All finance fields must be included in update requests
 
Unified Webhooks
Unified webhooks provide a streamlined way to receive real-time notifications about events on the Hostway platform. Unlike legacy webhooks that required separate configurations for different event types, unified webhooks use a single endpoint configuration to receive all supported events.
Key Features
•	Single Configuration: One webhook endpoint receives all event types
•	Real-time Updates: Immediate notifications when events occur
•	No Event Filtering: Receive all events (filtering must be done on your end)
•	Reliable Delivery: Automatic retry mechanism with failure handling
•	Backward Compatibility: Works alongside legacy webhook systems
Supported Events
Currently supported webhook events:
Event	Description
reservation created	New reservation created from any channel
reservation updated	Existing reservation modified
new message received	New message added to a conversation
Note: Additional events will be added over time. Your system should gracefully handle unknown events by returning a 200 response.
Webhook Delivery Requirements
Response Expectations
•	Success Response: Return HTTP 200 status code for successful processing
•	Response Time: Must respond within 30 seconds
•	Async Processing: For longer processing, log the request, return 200, and process asynchronously
Retry Policy
•	Retry Attempts: Up to 3 retries for failed deliveries
•	Failure Threshold: Webhooks disabled after 5 consecutive days of failures
•	Duplicate Handling: Your system must handle potential duplicate notifications
Authentication Support
•	Basic Authentication: Optional username/password authentication
•	Custom Headers: Hostaway includes authentication in request headers
Unified Webhook Object
{
    "id": 2,
    "isEnabled": 1,
    "url": "https://api.example.com/webhooks",
    "login": "username",
    "password": "password",
    "alertingEmailAddress": "alerts@example.com"
}
Webhook Properties:
Property	Required	Type	Description
id	Yes	integer	Unique webhook identifier
isEnabled	Yes	integer	Webhook status (0=disabled, 1=enabled)
url	Yes	string	Endpoint URL for webhook notifications
login	No	string	Basic authentication username
password	No	string	Basic authentication password
alertingEmailAddress	No	string	Email for delivery failure notifications
Webhook Endpoints
List Unified Webhooks
Endpoint: GET https://api.hostaway.com/v1/webhooks/unifiedWebhooks
Example Request:
curl -X GET \
  https://api.hostaway.com/v1/webhooks/unifiedWebhooks \
  -H 'Authorization: Bearer your_access_token' \
  -H 'Cache-control: no-cache'
Response: Array of unified webhook objects.
Create Unified Webhook
Endpoint: POST https://api.hostaway.com/v1/webhooks/unifiedWebhooks
Request Body:
{
    "isEnabled": 1,
    "url": "https://api.example.com/webhooks",
    "login": "optional_username",
    "password": "optional_password",
    "alertingEmailAddress": "alerts@example.com"
}
Example Request:
curl -X POST \
  https://api.hostaway.com/v1/webhooks/unifiedWebhooks \
  -H 'Authorization: Bearer your_access_token' \
  -H 'Content-type: application/json' \
  -d '{
    "isEnabled": 1,
    "url": "https://api.example.com/webhooks",
    "alertingEmailAddress": "alerts@example.com"
  }'
Response: Created webhook object or error response.
Get Unified Webhook
Endpoint: GET https://api.hostaway.com/v1/webhooks/unifiedWebhooks/{webhookId}
Example Request:
curl -X GET \
  https://api.hostaway.com/v1/webhooks/unifiedWebhooks/1 \
  -H 'Authorization: Bearer your_access_token' \
  -H 'Cache-control: no-cache'
Response: Single webhook object.
Update Unified Webhook
Endpoint: PUT https://api.hostaway.com/v1/webhooks/unifiedWebhooks/{webhookId}
Request Body: Complete webhook object with updated fields.
Example Request:
curl -X PUT \
  https://api.hostaway.com/v1/webhooks/unifiedWebhooks/1 \
  -H 'Authorization: Bearer your_access_token' \
  -H 'Content-type: application/json' \
  -d '{
    "isEnabled": 0,
    "url": "https://api.example.com/new-webhook-endpoint"
  }'
Response: Updated webhook object or error response.
Delete Unified Webhook
Endpoint: DELETE https://api.hostaway.com/v1/webhooks/unifiedWebhooks/{webhookId}
Example Request:
curl -X DELETE \
  https://api.hostaway.com/v1/webhooks/unifiedWebhooks/1 \
  -H 'Authorization: Bearer your_access_token' \
  -H 'Cache-control: no-cache'
Response: Empty success response or error response.
Webhook Implementation Best Practices
Endpoint Design
1.	Idempotency: Handle duplicate webhooks gracefully
2.	Fast Response: Return 200 quickly, process asynchronously if needed
3.	Error Handling: Log errors but still return 200 for known events
4.	Unknown Events: Return 200 for unsupported event types
Security Considerations
1.	Validate Source: Verify requests are from Hostway
2.	Secure Endpoints: Use HTTPS for webhook URLs
3.	Authentication: Configure login/password for additional security
4.	Rate Limiting: Implement appropriate rate limiting
Example Webhook Handler (Pseudocode)
def handle_webhook(request):
    try:
        # Log the incoming webhook
        log_webhook(request.body)
        
        # Parse the event
        event = parse_webhook_event(request.body)
        
        # Queue for async processing
        queue_event_for_processing(event)
        
        # Return success immediately
        return response(status=200)
        
    except UnknownEventError:
        # Handle unknown events gracefully
        log_unknown_event(request.body)
        return response(status=200)
        
    except Exception as e:
        # Log error but still return 200 to avoid retries
        log_error(e)
        return response(status=200)
 
Seasonal Rules
Seasonal rules allow you to define time-based restrictions and requirements for bookings, such as minimum/maximum night stays, check-in/check-out restrictions, and channel-specific policies.
Seasonal Rule Object
{
    "id": 1,
    "title": "Summer Season Rules",
    "channelId": 2020,
    "closedForCheckin": "['Monday']",
    "closedForCheckout": "['Friday']",
    "color": "#FF5733",
    "minNightsSunday": 3,
    "minNightsMonday": 2,
    "minNightsTuesday": 2,
    "minNightsWednesday": 2,
    "minNightsThursday": 2,
    "minNightsFriday": 3,
    "minNightsSaturday": 3,
    "maxNightsSunday": 14,
    "maxNightsMonday": 14,
    "maxNightsTuesday": 14,
    "maxNightsWednesday": 14,
    "maxNightsThursday": 14,
    "maxNightsFriday": 14,
    "maxNightsSaturday": 14,
    "minNightsUnspecified": 2,
    "maxNightsUnspecified": 14,
    "pricingRules": null
}
Seasonal Rule Properties:
Property	Required	Type	Description
id	Yes	integer	Unique seasonal rule identifier
title	Yes	string	Descriptive name for the rule
channelId	Yes	integer	Associated channel ID (see Channel IDs)
closedForCheckin	No	string	JSON array of days closed for check-in
closedForCheckout	No	string	JSON array of days closed for check-out
color	No	string	Display color for calendar visualization
minNightsUnspecified	No	integer	Default minimum nights requirement
maxNightsUnspecified	No	integer	Default maximum nights allowed
pricingRules	No	string	Additional pricing rule configurations
Day-Specific Minimum Nights:
Property	Type	Description
minNightsSunday	integer	Minimum nights for Sunday check-ins
minNightsMonday	integer	Minimum nights for Monday check-ins
minNightsTuesday	integer	Minimum nights for Tuesday check-ins
minNightsWednesday	integer	Minimum nights for Wednesday check-ins
minNightsThursday	integer	Minimum nights for Thursday check-ins
minNightsFriday	integer	Minimum nights for Friday check-ins
minNightsSaturday	integer	Minimum nights for Saturday check-ins
Day-Specific Maximum Nights:
Property	Type	Description
maxNightsSunday	integer	Maximum nights for Sunday check-ins
maxNightsMonday	integer	Maximum nights for Monday check-ins
maxNightsTuesday	integer	Maximum nights for Tuesday check-ins
maxNightsWednesday	integer	Maximum nights for Wednesday check-ins
maxNightsThursday	integer	Maximum nights for Thursday check-ins
maxNightsFriday	integer	Maximum nights for Friday check-ins
maxNightsSaturday	integer	Maximum nights for Saturday check-ins
Seasonal Rule Endpoints
Retrieve Seasonal Rules
Endpoint: GET https://api.hostaway.com/v1/seasonalRules
Query Parameters:
Parameter	Required	Type	Description
limit	No	integer	Maximum number of items to return
offset	No	integer	Number of items to skip
channelId	No	integer	Filter by channel ID
Example Request:
curl -X GET \
  'https://api.hostaway.com/v1/seasonalRules?limit=10&channelId=2020' \
  -H 'Authorization: Bearer your_access_token' \
  -H 'Cache-control: no-cache'
Response:
{
  "status": "success",
  "result": [
    {
       "id": 1,
        "title": "Summer Season Rules",
        "channelId": 2020,
        "closedForCheckin": "['Monday']",
        "closedForCheckout": "['Friday']",
        "minNightsSunday": 3,
        "minNightsMonday": 2,
        "maxNightsSaturday": 14
    }
  ]
}
Retrieve Seasonal Rule Intervals
Get seasonal rules applied to specific date ranges for a listing.
Endpoint: GET https://api.hostaway.com/v1/seasonalRules/intervals
Query Parameters:
Parameter	Required	Type	Description
listingMapId	Yes	integer	Listing identifier
startDate	Yes	date	Interval start date (YYYY-MM-DD)
endDate	Yes	date	Interval end date (YYYY-MM-DD)
channelId	No	integer	Filter by channel ID
Example Request:
curl -X GET \
  'https://api.hostaway.com/v1/seasonalRules/intervals?listingMapId=40160&startDate=2024-06-01&endDate=2024-08-31' \
  -H 'Authorization: Bearer your_access_token' \
  -H 'Cache-control: no-cache'
Response:
{
  "status": "success",
  "result": [
    {
        "from": "2024-06-01",
        "to": "2024-08-31",
        "seasonalRule": {
            "id": 1,
            "title": "Summer Season Rules",
            "channelId": 2020,
            "closedForCheckin": "['Monday']",
            "closedForCheckout": "['Friday']",
            "minNightsSunday": 3,
            "minNightsMonday": 2,
            "maxNightsSaturday": 14
        }
    }
  ]
}
Use Cases for Seasonal Rules
Peak Season Management
•	Higher Minimum Stays: Require longer stays during peak periods
•	Check-in Restrictions: Limit check-ins to specific days
•	Maximum Stay Limits: Prevent overly long bookings during high-demand periods
Off-Season Flexibility
•	Lower Minimums: Allow shorter stays during slower periods
•	Flexible Check-ins: Open all days for check-in/check-out
•	Extended Stays: Allow longer bookings to maintain occupancy
Channel-Specific Rules
•	Platform Policies: Different rules for Airbnb vs. Booking.com
•	Direct Booking Incentives: More flexible rules for direct bookings
•	Partner Requirements: Custom rules for specific booking partners
Integration Considerations
Rule Priority
1.	Seasonal Rules: Override base listing settings during specified periods
2.	Day-Specific Rules: Take precedence over general min/max night settings
3.	Channel Rules: Apply only to bookings from specified channels
Calendar Integration
•	Availability Checking: Rules affect booking availability calculations
•	Pricing Impact: Minimum stays can influence pricing strategies
•	User Experience: Clear communication of restrictions to guests
 
Getting Started
1.	Generate an access token using the authentication endpoint
2.	Store the token securely in your application
3.	Include the token in the Authorization header for all API requests
4.	Implement rate limiting and retry logic in your application
5.	Set up webhooks for real-time notifications (optional)
Support
For technical support and questions about the Hostway API, please contact our development team or refer to the detailed endpoint documentation in the following sections.

